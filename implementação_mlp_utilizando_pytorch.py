# -*- coding: utf-8 -*-
"""Implementação MLP - Utilizando Pytorch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ODRNnal6cEQjfILgE0rUBfUxssAgYRDz

## Implementação de uma arquitetura Multilayer Perceptron - MLP
##### Prof. Me. Victor Hugo Braguim Canto
##### Íris Dataset (UCI)

##### Importação das Bibliotecas
"""

import torch
import torch.nn as nn
import torch.optim as optim
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from torch.utils.data import DataLoader, TensorDataset

"""##### Importação da Base de Dados Íris da UCI"""

iris = load_iris()
X = iris.data
y = iris.target

"""##### Visualização da Distribuição das Espécies"""

df = pd.DataFrame(iris.data, columns=iris.feature_names)
df['species'] = iris.target

species_mapping = {0: 'Setosa', 1: 'Versicolor', 2: 'Virginica'}
df['species'] = df['species'].map(species_mapping)
plt.figure(figsize=(8, 6))
sns.scatterplot(x=df.iloc[:, 0], y=df.iloc[:, 1], hue=df['species'], palette="Set1")
plt.xlabel(iris.feature_names[0])
plt.ylabel(iris.feature_names[1])
plt.title("Visualização do Conjunto de Dados Iris")
plt.legend(title="Espécie")
plt.show()

"""##### Visualização dos Dados"""

X

"""##### Visualização dos Dados de Target"""

y

"""##### Normalização dos Dados"""

scaler = StandardScaler()
X = scaler.fit_transform(X)

X

"""##### Transformando os Dados na Estrutura de Tensores"""

X_tensor = torch.tensor(X, dtype=torch.float32)
y_tensor = torch.tensor(y, dtype=torch.long)

"""##### Visualizando o Tensor X"""

X_tensor

"""##### Realizando o Split da Base de Dados"""

X_train, X_test, y_train, y_test = train_test_split(X_tensor, y_tensor, test_size=0.2, random_state=42)

"""##### Transformando os Dados no Padrão do TensorDataset"""

train_dataset = TensorDataset(X_train, y_train)
test_dataset = TensorDataset(X_test, y_test)
train_loader = DataLoader(train_dataset, batch_size=8, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=8, shuffle=False)

"""##### Criando a Arquitetura Multilayer Perceptron"""

class MLP(nn.Module):
    def __init__(self):
        super(MLP, self).__init__()
        self.fc1 = nn.Linear(4, 16)
        self.fc2 = nn.Linear(16, 8)
        self.fc3 = nn.Linear(8, 3)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.relu(self.fc1(x))
        x = self.relu(self.fc2(x))
        x = self.fc3(x)
        return x

"""##### Plotando a arquitetura na forma de neurônios"""

import networkx as nx
import matplotlib.pyplot as plt

layers = [4, 16, 8, 3]

G = nx.DiGraph()

positions = {}
y_offset = 0

for layer_idx, num_neurons in enumerate(layers):
    for neuron_idx in range(num_neurons):
        node_name = f"L{layer_idx}_N{neuron_idx}"
        G.add_node(node_name, layer=layer_idx)
        positions[node_name] = (layer_idx, -neuron_idx + num_neurons / 2)

for layer_idx in range(len(layers) - 1):
    for src in range(layers[layer_idx]):
        for dst in range(layers[layer_idx + 1]):
            src_node = f"L{layer_idx}_N{src}"
            dst_node = f"L{layer_idx+1}_N{dst}"
            G.add_edge(src_node, dst_node)

plt.figure(figsize=(8, 6))
nx.draw(G, pos=positions, with_labels=False, node_size=500, node_color="lightblue", edge_color="gray", alpha=0.6)

for layer_idx, num_neurons in enumerate(layers):
    plt.text(layer_idx, num_neurons / 2 + 1, f"Camada {layer_idx}", fontsize=12, ha="center")

plt.title("Arquitetura da Rede Neural MLP")
plt.show()

"""##### Criando o objeto MLP"""

model = MLP()

"""##### Definindo as Funções de Perda e Otimizador"""

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.01)

"""##### Treinando o Modelo"""

epochs = 50
for epoch in range(epochs):
    for batch in train_loader:
        X_batch, y_batch = batch

        optimizer.zero_grad()
        outputs = model(X_batch)
        loss = criterion(outputs, y_batch)
        loss.backward()
        optimizer.step()

    print(f'Epoch {epoch+1}/{epochs}, Loss: {loss.item():.4f}')

"""##### Testando o Modelo"""

correct = 0
total = 0
with torch.no_grad():
    for batch in test_loader:
        X_batch, y_batch = batch
        outputs = model(X_batch)
        _, predicted = torch.max(outputs, 1)
        correct += (predicted == y_batch).sum().item()
        total += y_batch.size(0)

accuracy = 100 * correct / total
print(f'Acurácia no conjunto de teste: {accuracy:.2f}%')

"""#### Por que 100% nos dados de testes?

*   Não é comum.
*   Mas, temos um problemas simples com uma base estruturada.
*   Fique atento(a), em outras bases, caso isso ocorra, há a possibilidade de ser overfitting!


"""

